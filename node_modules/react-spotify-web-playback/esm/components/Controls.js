var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Next from './icons/Next';
import Pause from './icons/Pause';
import Play from './icons/Play';
import Previous from './icons/Previous';
import { px, styled } from '../styles';
var Wrapper = styled('div')({}, function (_a) {
    var style = _a.style;
    return ({
        alignItems: 'center',
        display: 'flex',
        height: px(style.h),
        justifyContent: 'center',
        '@media (max-width: 767px)': {
            padding: px(10),
        },
        '> div': {
            minWidth: px(style.h),
            textAlign: 'center',
        },
        button: {
            alignItems: 'center',
            color: style.c,
            display: 'inline-flex',
            fontSize: px(16),
            height: px(48),
            justifyContent: 'center',
            width: px(48),
            '&.rswp__toggle': {
                fontSize: px(28),
            },
        },
    });
}, 'ControlsRSWP');
export default function Controls(props) {
    var isExternalDevice = props.isExternalDevice, isPlaying = props.isPlaying, locale = props.locale, nextTracks = props.nextTracks, onClickNext = props.onClickNext, onClickPrevious = props.onClickPrevious, onClickTogglePlay = props.onClickTogglePlay, previousTracks = props.previousTracks, _a = props.styles, color = _a.color, height = _a.height;
    return (_jsxs(Wrapper, __assign({ style: { c: color, h: height } }, { children: [_jsx("div", { children: (!!previousTracks.length || isExternalDevice) && (_jsx("button", __assign({ "aria-label": locale.previous, onClick: onClickPrevious, title: locale.previous, type: "button" }, { children: _jsx(Previous, {}) }))) }), _jsx("div", { children: _jsx("button", __assign({ "aria-label": isPlaying ? locale.pause : locale.play, className: "rswp__toggle", onClick: onClickTogglePlay, title: isPlaying ? locale.pause : locale.play, type: "button" }, { children: isPlaying ? _jsx(Pause, {}) : _jsx(Play, {}) })) }), _jsx("div", { children: (!!nextTracks.length || isExternalDevice) && (_jsx("button", __assign({ "aria-label": locale.next, onClick: onClickNext, title: locale.next, type: "button" }, { children: _jsx(Next, {}) }))) })] })));
}
//# sourceMappingURL=Controls.js.map
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var React = require("react");
var react_range_slider_1 = require("@gilbarbara/react-range-slider");
var ClickOutside_1 = require("./ClickOutside");
var VolumeHigh_1 = require("./icons/VolumeHigh");
var VolumeLow_1 = require("./icons/VolumeLow");
var VolumeMute_1 = require("./icons/VolumeMute");
var styles_1 = require("../styles");
var Wrapper = (0, styles_1.styled)('div')({
    'pointer-events': 'all',
    position: 'relative',
    zIndex: 20,
    '> div': {
        display: 'flex',
        flexDirection: 'column',
        padding: (0, styles_1.px)(12),
        position: 'absolute',
        right: "-".concat((0, styles_1.px)(3)),
    },
    '> button': {
        fontSize: (0, styles_1.px)(26),
    },
    '@media (max-width: 1023px)': {
        display: 'none',
    },
}, function (_a) {
    var _b;
    var style = _a.style;
    return ({
        '> button': {
            color: style.c,
        },
        '> div': (_b = {
                backgroundColor: style.bgColor,
                boxShadow: style.altColor ? "1px 1px 10px ".concat(style.altColor) : 'none'
            },
            _b[style.p] = '120%',
            _b),
    });
}, 'VolumeRSWP');
var Volume = /** @class */ (function (_super) {
    __extends(Volume, _super);
    function Volume(props) {
        var _this = _super.call(this, props) || this;
        Object.defineProperty(_this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "handleClick", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function () {
                _this.setState(function (state) { return ({ isOpen: !state.isOpen }); });
            }
        });
        Object.defineProperty(_this, "handleChangeSlider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function (_a) {
                var y = _a.y;
                var setVolume = _this.props.setVolume;
                var volume = Math.round(y) / 100;
                clearTimeout(_this.timeout);
                _this.timeout = window.setTimeout(function () {
                    setVolume(volume);
                }, 250);
                _this.setState({ volume: volume });
            }
        });
        Object.defineProperty(_this, "handleAfterEnd", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function () {
                setTimeout(function () {
                    _this.setState({ isOpen: false });
                }, 100);
            }
        });
        _this.state = {
            isOpen: false,
            volume: props.volume,
        };
        return _this;
    }
    Object.defineProperty(Volume.prototype, "componentDidUpdate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (previousProps) {
            var volumeState = this.state.volume;
            var volume = this.props.volume;
            if (previousProps.volume !== volume && volume !== volumeState) {
                // eslint-disable-next-line react/no-did-update-set-state
                this.setState({ volume: volume });
            }
        }
    });
    Object.defineProperty(Volume.prototype, "render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _a = this.state, isOpen = _a.isOpen, volume = _a.volume;
            var _b = this.props, playerPosition = _b.playerPosition, _c = _b.styles, altColor = _c.altColor, bgColor = _c.bgColor, color = _c.color, title = _b.title;
            var icon = (0, jsx_runtime_1.jsx)(VolumeHigh_1.default, {});
            if (volume === 0) {
                icon = (0, jsx_runtime_1.jsx)(VolumeMute_1.default, {});
            }
            else if (volume <= 0.5) {
                icon = (0, jsx_runtime_1.jsx)(VolumeLow_1.default, {});
            }
            return ((0, jsx_runtime_1.jsxs)(Wrapper, __assign({ style: { altColor: altColor, bgColor: bgColor, c: color, p: playerPosition } }, { children: [isOpen && ((0, jsx_runtime_1.jsx)(ClickOutside_1.default, __assign({ onClick: this.handleClick }, { children: (0, jsx_runtime_1.jsx)(react_range_slider_1.default, { axis: "y", className: "rrs", onAfterEnd: this.handleAfterEnd, onChange: this.handleChangeSlider, styles: {
                                options: {
                                    thumbBorder: "2px solid ".concat(color),
                                    thumbBorderRadius: 12,
                                    thumbColor: bgColor,
                                    thumbSize: 12,
                                    padding: 0,
                                    rangeColor: altColor || '#ccc',
                                    trackColor: color,
                                    width: 6,
                                },
                            }, y: volume * 100, yMax: 100, yMin: 0 }) }))), (0, jsx_runtime_1.jsx)("button", __assign({ "aria-label": title, onClick: !isOpen ? this.handleClick : undefined, title: title, type: "button" }, { children: icon }))] })));
        }
    });
    return Volume;
}(React.PureComponent));
exports.default = Volume;
//# sourceMappingURL=Volume.js.map
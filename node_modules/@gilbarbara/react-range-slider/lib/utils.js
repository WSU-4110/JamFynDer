"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.round = exports.removeProperties = exports.parseNumber = exports.isUndefined = exports.isNumber = exports.getNormalizedValue = exports.getPosition = exports.getCoordinates = exports.getBaseProps = void 0;
function getBaseProps(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return {
        axis: (_a = props === null || props === void 0 ? void 0 : props.axis) !== null && _a !== void 0 ? _a : 'x',
        xMax: (_b = props === null || props === void 0 ? void 0 : props.xMax) !== null && _b !== void 0 ? _b : 100,
        xMin: (_c = props === null || props === void 0 ? void 0 : props.xMin) !== null && _c !== void 0 ? _c : 0,
        xStep: (_d = props === null || props === void 0 ? void 0 : props.xStep) !== null && _d !== void 0 ? _d : 1,
        yMax: (_e = props === null || props === void 0 ? void 0 : props.yMax) !== null && _e !== void 0 ? _e : 100,
        yMin: (_f = props === null || props === void 0 ? void 0 : props.yMin) !== null && _f !== void 0 ? _f : 0,
        yStep: (_g = props === null || props === void 0 ? void 0 : props.yStep) !== null && _g !== void 0 ? _g : 1,
    };
}
exports.getBaseProps = getBaseProps;
function getCoordinates(event, lastPosition) {
    if ('touches' in event) {
        // eslint-disable-next-line unicorn/prefer-spread
        var _a = __read(__spreadArray([], __read(Array.from(event.touches)), false), 1), touch = _a[0];
        return {
            x: touch ? touch.clientX : lastPosition.x,
            y: touch ? touch.clientY : lastPosition.y,
        };
    }
    return {
        x: event.clientX,
        y: event.clientY,
    };
}
exports.getCoordinates = getCoordinates;
function getPosition(position, props, el) {
    var _a = getBaseProps(props), axis = _a.axis, xMax = _a.xMax, xMin = _a.xMin, xStep = _a.xStep, yMax = _a.yMax, yMin = _a.yMin, yStep = _a.yStep;
    var _b = (el === null || el === void 0 ? void 0 : el.getBoundingClientRect()) || {}, _c = _b.height, height = _c === void 0 ? xMax : _c, _d = _b.width, width = _d === void 0 ? yMax : _d;
    var x = position.x, y = position.y;
    var dx = 0;
    var dy = 0;
    if (x < 0) {
        x = 0;
    }
    if (x > width) {
        x = width;
    }
    if (y < 0) {
        y = 0;
    }
    if (y > height) {
        y = height;
    }
    if (axis === 'x' || axis === 'xy') {
        dx = Math.round((x / width) * (xMax - xMin));
    }
    if (axis === 'y' || axis === 'xy') {
        dy = Math.round((y / height) * (yMax - yMin));
    }
    return {
        x: round(dx, xStep),
        y: round(dy, yStep),
    };
}
exports.getPosition = getPosition;
/**
 * Get a normalized value
 */
function getNormalizedValue(name, props) {
    var value = props[name] || 0;
    var min = name === 'x' ? props.xMin : props.yMin;
    var max = name === 'x' ? props.xMax : props.yMax;
    if (isNumber(min) && value < min) {
        return min;
    }
    if (isNumber(max) && value > max) {
        return max;
    }
    return value;
}
exports.getNormalizedValue = getNormalizedValue;
/**
 * Check if the value is a number
 */
function isNumber(value) {
    return typeof value === 'number';
}
exports.isNumber = isNumber;
/**
 * Check if the value is undefined
 */
function isUndefined(value) {
    return typeof value === 'undefined';
}
exports.isUndefined = isUndefined;
/**
 * Parse a string into a number or return it if it's already a number
 */
function parseNumber(value) {
    if (typeof value === 'number') {
        return value;
    }
    return parseInt(value, 10);
}
exports.parseNumber = parseNumber;
/**
 *  Remove properties from an object
 */
function removeProperties(input) {
    var filter = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        filter[_i - 1] = arguments[_i];
    }
    var output = {};
    for (var key in input) {
        /* istanbul ignore else */
        if ({}.hasOwnProperty.call(input, key)) {
            if (!filter.includes(key)) {
                output[key] = input[key];
            }
        }
    }
    return output;
}
exports.removeProperties = removeProperties;
function round(value, increment) {
    return Math.ceil(value / increment) * increment;
}
exports.round = round;
//# sourceMappingURL=utils.js.map
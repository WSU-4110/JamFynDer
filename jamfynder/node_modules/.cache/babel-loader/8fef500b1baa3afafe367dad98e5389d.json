{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { canUseDOM as canUseDOMBool } from 'exenv';\nexport var canUseDOM = function canUseDOM() {\n  return canUseDOMBool;\n};\nexport var STATUS = {\n  ERROR: 'ERROR',\n  IDLE: 'IDLE',\n  INITIALIZING: 'INITIALIZING',\n  READY: 'READY',\n  RUNNING: 'RUNNING',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nexport var TYPE = {\n  DEVICE: 'device_update',\n  FAVORITE: 'favorite_update',\n  PLAYER: 'player_update',\n  PROGRESS: 'progress_update',\n  STATUS: 'status_update',\n  TRACK: 'track_update'\n};\nexport function getLocale(locale) {\n  return __assign({\n    devices: 'Devices',\n    next: 'Next',\n    pause: 'Pause',\n    play: 'Play',\n    previous: 'Previous',\n    title: '{name} on SPOTIFY',\n    volume: 'Volume'\n  }, locale);\n}\nexport function getSpotifyLink(uri) {\n  var _a = __read(uri.split(':'), 3),\n    _b = _a[1],\n    type = _b === void 0 ? '' : _b,\n    _c = _a[2],\n    id = _c === void 0 ? '' : _c;\n  return \"https://open.spotify.com/\".concat(type, \"/\").concat(id);\n}\nexport function getSpotifyLinkTitle(name, locale) {\n  return locale.replace('{name}', name);\n}\nexport function getSpotifyURIType(uri) {\n  var _a = __read(uri.split(':'), 2),\n    _b = _a[1],\n    type = _b === void 0 ? '' : _b;\n  return type;\n}\nexport function isEqualArray(A, B) {\n  if (!Array.isArray(A) || !Array.isArray(B) || A.length !== B.length) {\n    return false;\n  }\n  var result = true;\n  A.forEach(function (a) {\n    return B.forEach(function (b) {\n      result = a === b;\n    });\n  });\n  return result;\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function loadSpotifyPlayer() {\n  return new Promise(function (resolve, reject) {\n    var scriptTag = document.getElementById('spotify-player');\n    if (!scriptTag) {\n      var script = document.createElement('script');\n      script.id = 'spotify-player';\n      script.type = 'text/javascript';\n      script.async = false;\n      script.defer = true;\n      script.src = 'https://sdk.scdn.co/spotify-player.js';\n      script.onload = function () {\n        return resolve();\n      };\n      script.onerror = function (error) {\n        return reject(new Error(\"loadScript: \".concat(error.message)));\n      };\n      document.head.appendChild(script);\n    } else {\n      resolve();\n    }\n  });\n}\nexport function parseVolume(value) {\n  if (!isNumber(value)) {\n    return 1;\n  }\n  if (value > 1) {\n    return value / 100;\n  }\n  return value;\n}\n/**\n * Round decimal numbers\n */\nexport function round(number, digits) {\n  if (digits === void 0) {\n    digits = 2;\n  }\n  var factor = Math.pow(10, digits);\n  return Math.round(number * factor) / factor;\n}\nexport function validateURI(input) {\n  var validTypes = ['album', 'artist', 'playlist', 'show', 'track'];\n  /* istanbul ignore else */\n  if (input && input.indexOf(':') > -1) {\n    var _a = __read(input.split(':'), 3),\n      key = _a[0],\n      type = _a[1],\n      id = _a[2];\n    /* istanbul ignore else */\n    if (key === 'spotify' && validTypes.indexOf(type) >= 0 && id.length === 22) {\n      return true;\n    }\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}
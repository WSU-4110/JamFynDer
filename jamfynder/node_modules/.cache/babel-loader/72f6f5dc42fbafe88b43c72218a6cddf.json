{"ast":null,"code":"'use strict';\n\nvar addonCache = require('./cache').addon;\nexports.addon = function (renderer) {\n  if (!renderer.cache) {\n    addonCache(renderer);\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    require('./__dev__/warnOnMissingDependencies')('jsx', renderer, ['rule', 'cache']);\n  }\n  renderer.jsx = function (fn, styles, block) {\n    var className;\n    var isElement = typeof fn === 'string';\n\n    // In dev mode emit CSS immediately so correct sourcemaps can be generated.\n    if (process.env.NODE_ENV !== 'production') {\n      className = renderer.rule(styles, block);\n    }\n    var Component = function Component(props) {\n      if (!className) {\n        className = renderer.rule(styles, block);\n      }\n      var copy = props;\n      var $as = copy.$as;\n      var $ref = copy.$ref;\n      if (process.env.NODE_ENV !== 'production') {\n        copy = renderer.assign({}, props);\n      }\n      var dynamicClassName = renderer.cache(props.css);\n      delete copy.css;\n      delete copy.$as;\n      if (isElement || $as) {\n        delete copy.$ref;\n        copy.ref = $ref;\n      }\n      copy.className = (props.className || '') + className + dynamicClassName;\n      return isElement || $as ? renderer.h($as || fn, copy) : fn(copy);\n    };\n    if (process.env.NODE_ENV !== 'production') {\n      if (block) {\n        Component.displayName = 'jsx(' + block + ')';\n      }\n    }\n    return Component;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
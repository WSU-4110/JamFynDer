{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from 'react';\nimport ClickOutside from './ClickOutside';\nimport DevicesIcon from './icons/Devices';\nimport { px, styled } from '../styles';\nvar Wrapper = styled('div')({\n  'pointer-events': 'all',\n  position: 'relative',\n  zIndex: 20,\n  '> div': {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: px(8),\n    position: 'absolute',\n    right: \"-\".concat(px(3)),\n    button: {\n      display: 'block',\n      padding: px(8),\n      whiteSpace: 'nowrap',\n      '&.rswp__devices__active': {\n        fontWeight: 'bold'\n      }\n    }\n  },\n  '> button': {\n    fontSize: px(26)\n  }\n}, function (_a) {\n  var _b;\n  var style = _a.style;\n  return {\n    '> button': {\n      color: style.c\n    },\n    '> div': (_b = {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? \"1px 1px 10px \".concat(style.altColor) : 'none'\n    }, _b[style.p] = '120%', _b.button = {\n      color: style.c\n    }, _b)\n  };\n}, 'DevicesRSWP');\nvar Devices = /** @class */function (_super) {\n  __extends(Devices, _super);\n  function Devices(props) {\n    var _this = _super.call(this, props) || this;\n    Object.defineProperty(_this, \"handleClickSetDevice\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(event) {\n        var onClickDevice = _this.props.onClickDevice;\n        var dataset = event.currentTarget.dataset;\n        /* istanbul ignore else */\n        if (dataset.id) {\n          onClickDevice(dataset.id);\n          _this.setState({\n            isOpen: false\n          });\n        }\n      }\n    });\n    Object.defineProperty(_this, \"handleClickToggleDevices\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        _this.setState(function (state) {\n          return {\n            isOpen: !state.isOpen\n          };\n        });\n      }\n    });\n    _this.state = {\n      isOpen: props.open\n    };\n    return _this;\n  }\n  Object.defineProperty(Devices.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _this = this;\n      var isOpen = this.state.isOpen;\n      var _a = this.props,\n        currentDeviceId = _a.currentDeviceId,\n        deviceId = _a.deviceId,\n        devices = _a.devices,\n        playerPosition = _a.playerPosition,\n        _b = _a.styles,\n        activeColor = _b.activeColor,\n        altColor = _b.altColor,\n        bgColor = _b.bgColor,\n        color = _b.color,\n        title = _a.title;\n      return _jsx(Wrapper, __assign({\n        style: {\n          altColor: altColor,\n          bgColor: bgColor,\n          c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,\n          p: playerPosition\n        }\n      }, {\n        children: !!devices.length && _jsxs(_Fragment, {\n          children: [isOpen && _jsx(ClickOutside, __assign({\n            onClick: this.handleClickToggleDevices\n          }, {\n            children: devices.map(function (d) {\n              return _jsx(\"button\", __assign({\n                className: d.id === currentDeviceId ? 'rswp__devices__active' : undefined,\n                \"data-id\": d.id,\n                onClick: _this.handleClickSetDevice,\n                type: \"button\"\n              }, {\n                children: d.name\n              }), d.id);\n            })\n          })), _jsx(\"button\", __assign({\n            \"aria-label\": title,\n            onClick: this.handleClickToggleDevices,\n            title: title,\n            type: \"button\"\n          }, {\n            children: _jsx(DevicesIcon, {})\n          }))]\n        })\n      }));\n    }\n  });\n  return Devices;\n}(React.PureComponent);\nexport default Devices;","map":null,"metadata":{},"sourceType":"module"}
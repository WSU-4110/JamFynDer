{"ast":null,"code":"'use strict';\n\nvar KEBAB_REGEX = /[A-Z]/g;\nvar _hash = function hash(str) {\n  var h = 5381,\n    i = str.length;\n  while (i) {\n    h = h * 33 ^ str.charCodeAt(--i);\n  }\n  return '_' + (h >>> 0).toString(36);\n};\nexports.create = function (config) {\n  config = config || {};\n  var assign = config.assign || Object.assign;\n  var client = typeof window === 'object';\n\n  // Check if we are really in browser environment.\n  if (process.env.NODE_ENV !== 'production') {\n    if (client) {\n      if (typeof document !== 'object' || !document.getElementsByTagName('HTML')) {\n        console.error('nano-css detected browser environment because of \"window\" global, but ' + '\"document\" global seems to be defective.');\n      }\n    }\n  }\n  var renderer = assign({\n    raw: '',\n    pfx: '_',\n    client: client,\n    assign: assign,\n    stringify: JSON.stringify,\n    kebab: function kebab(prop) {\n      return prop.replace(KEBAB_REGEX, '-$&').toLowerCase();\n    },\n    decl: function decl(key, value) {\n      key = renderer.kebab(key);\n      return key + ':' + value + ';';\n    },\n    hash: function hash(obj) {\n      return _hash(renderer.stringify(obj));\n    },\n    selector: function selector(parent, _selector) {\n      return parent + (_selector[0] === ':' ? '' : ' ') + _selector;\n    },\n    putRaw: function putRaw(rawCssRule) {\n      renderer.raw += rawCssRule;\n    }\n  }, config);\n  if (renderer.client) {\n    if (!renderer.sh) document.head.appendChild(renderer.sh = document.createElement('style'));\n    if (process.env.NODE_ENV !== 'production') {\n      renderer.sh.setAttribute('data-nano-css-dev', '');\n\n      // Test style sheet used in DEV mode to test if .insetRule() would throw.\n      renderer.shTest = document.createElement('style');\n      renderer.shTest.setAttribute('data-nano-css-dev-tests', '');\n      document.head.appendChild(renderer.shTest);\n    }\n    renderer.putRaw = function (rawCssRule) {\n      // .insertRule() is faster than .appendChild(), that's why we use it in PROD.\n      // But CSS injected using .insertRule() is not displayed in Chrome Devtools,\n      // that's why we use .appendChild in DEV.\n      if (process.env.NODE_ENV === 'production') {\n        var sheet = renderer.sh.sheet;\n\n        // Unknown pseudo-selectors will throw, this try/catch swallows all errors.\n        try {\n          sheet.insertRule(rawCssRule, sheet.cssRules.length);\n          // eslint-disable-next-line no-empty\n        } catch (error) {}\n      } else {\n        // Test if .insertRule() works in dev mode. Unknown pseudo-selectors will throw when\n        // .insertRule() is used, but .appendChild() will not throw.\n        try {\n          renderer.shTest.sheet.insertRule(rawCssRule, renderer.shTest.sheet.cssRules.length);\n        } catch (error) {\n          if (config.verbose) {\n            console.error(error);\n          }\n        }\n\n        // Insert pretty-printed CSS for dev mode.\n        renderer.sh.appendChild(document.createTextNode(rawCssRule));\n      }\n    };\n  }\n  renderer.put = function (selector, decls, atrule) {\n    var str = '';\n    var prop, value;\n    var postponed = [];\n    for (prop in decls) {\n      value = decls[prop];\n      if (value instanceof Object && !(value instanceof Array)) {\n        postponed.push(prop);\n      } else {\n        if (process.env.NODE_ENV !== 'production' && !renderer.sourcemaps) {\n          str += '    ' + renderer.decl(prop, value, selector, atrule) + '\\n';\n        } else {\n          str += renderer.decl(prop, value, selector, atrule);\n        }\n      }\n    }\n    if (str) {\n      if (process.env.NODE_ENV !== 'production' && !renderer.sourcemaps) {\n        str = '\\n' + selector + ' {\\n' + str + '}\\n';\n      } else {\n        str = selector + '{' + str + '}';\n      }\n      renderer.putRaw(atrule ? atrule + '{' + str + '}' : str);\n    }\n    for (var i = 0; i < postponed.length; i++) {\n      prop = postponed[i];\n      if (prop[0] === '@' && prop !== '@font-face') {\n        renderer.putAt(selector, decls[prop], prop);\n      } else {\n        renderer.put(renderer.selector(selector, prop), decls[prop], atrule);\n      }\n    }\n  };\n  renderer.putAt = renderer.put;\n  return renderer;\n};","map":null,"metadata":{},"sourceType":"script"}
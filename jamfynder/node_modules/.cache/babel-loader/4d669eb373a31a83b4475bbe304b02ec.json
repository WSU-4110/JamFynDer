{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from 'react';\nimport RangeSlider from '@gilbarbara/react-range-slider';\nimport ClickOutside from './ClickOutside';\nimport VolumeHigh from './icons/VolumeHigh';\nimport VolumeLow from './icons/VolumeLow';\nimport VolumeMute from './icons/VolumeMute';\nimport { px, styled } from '../styles';\nvar Wrapper = styled('div')({\n  'pointer-events': 'all',\n  position: 'relative',\n  zIndex: 20,\n  '> div': {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: px(12),\n    position: 'absolute',\n    right: \"-\".concat(px(3))\n  },\n  '> button': {\n    fontSize: px(26)\n  },\n  '@media (max-width: 1023px)': {\n    display: 'none'\n  }\n}, function (_a) {\n  var _b;\n  var style = _a.style;\n  return {\n    '> button': {\n      color: style.c\n    },\n    '> div': (_b = {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? \"1px 1px 10px \".concat(style.altColor) : 'none'\n    }, _b[style.p] = '120%', _b)\n  };\n}, 'VolumeRSWP');\nvar Volume = /** @class */function (_super) {\n  __extends(Volume, _super);\n  function Volume(props) {\n    var _this = _super.call(this, props) || this;\n    Object.defineProperty(_this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"handleClick\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        _this.setState(function (state) {\n          return {\n            isOpen: !state.isOpen\n          };\n        });\n      }\n    });\n    Object.defineProperty(_this, \"handleChangeSlider\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(_a) {\n        var y = _a.y;\n        var setVolume = _this.props.setVolume;\n        var volume = Math.round(y) / 100;\n        clearTimeout(_this.timeout);\n        _this.timeout = window.setTimeout(function () {\n          setVolume(volume);\n        }, 250);\n        _this.setState({\n          volume: volume\n        });\n      }\n    });\n    Object.defineProperty(_this, \"handleAfterEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        setTimeout(function () {\n          _this.setState({\n            isOpen: false\n          });\n        }, 100);\n      }\n    });\n    _this.state = {\n      isOpen: false,\n      volume: props.volume\n    };\n    return _this;\n  }\n  Object.defineProperty(Volume.prototype, \"componentDidUpdate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(previousProps) {\n      var volumeState = this.state.volume;\n      var volume = this.props.volume;\n      if (previousProps.volume !== volume && volume !== volumeState) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          volume: volume\n        });\n      }\n    }\n  });\n  Object.defineProperty(Volume.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _a = this.state,\n        isOpen = _a.isOpen,\n        volume = _a.volume;\n      var _b = this.props,\n        playerPosition = _b.playerPosition,\n        _c = _b.styles,\n        altColor = _c.altColor,\n        bgColor = _c.bgColor,\n        color = _c.color,\n        title = _b.title;\n      var icon = _jsx(VolumeHigh, {});\n      if (volume === 0) {\n        icon = _jsx(VolumeMute, {});\n      } else if (volume <= 0.5) {\n        icon = _jsx(VolumeLow, {});\n      }\n      return _jsxs(Wrapper, __assign({\n        style: {\n          altColor: altColor,\n          bgColor: bgColor,\n          c: color,\n          p: playerPosition\n        }\n      }, {\n        children: [isOpen && _jsx(ClickOutside, __assign({\n          onClick: this.handleClick\n        }, {\n          children: _jsx(RangeSlider, {\n            axis: \"y\",\n            className: \"rrs\",\n            onAfterEnd: this.handleAfterEnd,\n            onChange: this.handleChangeSlider,\n            styles: {\n              options: {\n                thumbBorder: \"2px solid \".concat(color),\n                thumbBorderRadius: 12,\n                thumbColor: bgColor,\n                thumbSize: 12,\n                padding: 0,\n                rangeColor: altColor || '#ccc',\n                trackColor: color,\n                width: 6\n              }\n            },\n            y: volume * 100,\n            yMax: 100,\n            yMin: 0\n          })\n        })), _jsx(\"button\", __assign({\n          \"aria-label\": title,\n          onClick: !isOpen ? this.handleClick : undefined,\n          title: title,\n          type: \"button\"\n        }, {\n          children: icon\n        }))]\n      }));\n    }\n  });\n  return Volume;\n}(React.PureComponent);\nexport default Volume;","map":null,"metadata":{},"sourceType":"module"}
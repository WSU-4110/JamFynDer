{"ast":null,"code":"/*!\n * destroy\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar ReadStream = require('fs').ReadStream;\n\nvar Stream = require('stream');\n\nvar Zlib = require('zlib');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = destroy;\n/**\n * Destroy the given stream, and optionally suppress any future `error` events.\n *\n * @param {object} stream\n * @param {boolean} suppress\n * @public\n */\n\nfunction destroy(stream, suppress) {\n  if (isFsReadStream(stream)) {\n    destroyReadStream(stream);\n  } else if (isZlibStream(stream)) {\n    destroyZlibStream(stream);\n  } else if (hasDestroy(stream)) {\n    stream.destroy();\n  }\n\n  if (isEventEmitter(stream) && suppress) {\n    stream.removeAllListeners('error');\n    stream.addListener('error', noop);\n  }\n\n  return stream;\n}\n/**\n * Destroy a ReadStream.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction destroyReadStream(stream) {\n  stream.destroy();\n\n  if (typeof stream.close === 'function') {\n    // node.js core bug work-around\n    stream.on('open', onOpenClose);\n  }\n}\n/**\n * Close a Zlib stream.\n *\n * Zlib streams below Node.js 4.5.5 have a buggy implementation\n * of .close() when zlib encountered an error.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction closeZlibStream(stream) {\n  if (stream._hadError === true) {\n    var prop = stream._binding === null ? '_binding' : '_handle';\n    stream[prop] = {\n      close: function close() {\n        this[prop] = null;\n      }\n    };\n  }\n\n  stream.close();\n}\n/**\n * Destroy a Zlib stream.\n *\n * Zlib streams don't have a destroy function in Node.js 6. On top of that\n * simply calling destroy on a zlib stream in Node.js 8+ will result in a\n * memory leak. So until that is fixed, we need to call both close AND destroy.\n *\n * PR to fix memory leak: https://github.com/nodejs/node/pull/23734\n *\n * In Node.js 6+8, it's important that destroy is called before close as the\n * stream would otherwise emit the error 'zlib binding closed'.\n *\n * @param {object} stream\n * @private\n */\n\n\nfunction destroyZlibStream(stream) {\n  if (typeof stream.destroy === 'function') {\n    // node.js core bug work-around\n    // istanbul ignore if: node.js 0.8\n    if (stream._binding) {\n      // node.js < 0.10.0\n      stream.destroy();\n\n      if (stream._processing) {\n        stream._needDrain = true;\n        stream.once('drain', onDrainClearBinding);\n      } else {\n        stream._binding.clear();\n      }\n    } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {\n      // node.js >= 12, ^11.1.0, ^10.15.1\n      stream.destroy();\n    } else if (stream._destroy && typeof stream.close === 'function') {\n      // node.js 7, 8\n      stream.destroyed = true;\n      stream.close();\n    } else {\n      // fallback\n      // istanbul ignore next\n      stream.destroy();\n    }\n  } else if (typeof stream.close === 'function') {\n    // node.js < 8 fallback\n    closeZlibStream(stream);\n  }\n}\n/**\n * Determine if stream has destroy.\n * @private\n */\n\n\nfunction hasDestroy(stream) {\n  return stream instanceof Stream && typeof stream.destroy === 'function';\n}\n/**\n * Determine if val is EventEmitter.\n * @private\n */\n\n\nfunction isEventEmitter(val) {\n  return val instanceof EventEmitter;\n}\n/**\n * Determine if stream is fs.ReadStream stream.\n * @private\n */\n\n\nfunction isFsReadStream(stream) {\n  return stream instanceof ReadStream;\n}\n/**\n * Determine if stream is Zlib stream.\n * @private\n */\n\n\nfunction isZlibStream(stream) {\n  return stream instanceof Zlib.Gzip || stream instanceof Zlib.Gunzip || stream instanceof Zlib.Deflate || stream instanceof Zlib.DeflateRaw || stream instanceof Zlib.Inflate || stream instanceof Zlib.InflateRaw || stream instanceof Zlib.Unzip;\n}\n/**\n * No-op function.\n * @private\n */\n\n\nfunction noop() {}\n/**\n * On drain handler to clear binding.\n * @private\n */\n// istanbul ignore next: node.js 0.8\n\n\nfunction onDrainClearBinding() {\n  this._binding.clear();\n}\n/**\n * On open handler to close stream.\n * @private\n */\n\n\nfunction onOpenClose() {\n  if (typeof this.fd === 'number') {\n    // actually close down the fd\n    this.close();\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
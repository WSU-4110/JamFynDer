{"ast":null,"code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = status; // status code to message map\n\nstatus.message = codes; // status message (lower-case) to code map\n\nstatus.code = createMessageToStatusCodeMap(codes); // array of status codes\n\nstatus.codes = createStatusCodeList(codes); // status codes for redirects\n\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap(codes) {\n  var map = {};\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // populate map\n\n    map[message.toLowerCase()] = status;\n  });\n  return map;\n}\n/**\n * Create a list of all status codes.\n * @private\n */\n\n\nfunction createStatusCodeList(codes) {\n  return Object.keys(codes).map(function mapCode(code) {\n    return Number(code);\n  });\n}\n/**\n * Get the status code for given message.\n * @private\n */\n\n\nfunction getStatusCode(message) {\n  var msg = message.toLowerCase();\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"');\n  }\n\n  return status.code[msg];\n}\n/**\n * Get the status message for given code.\n * @private\n */\n\n\nfunction getStatusMessage(code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code);\n  }\n\n  return status.message[code];\n}\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code);\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    return getStatusMessage(n);\n  }\n\n  return getStatusCode(code);\n}","map":null,"metadata":{},"sourceType":"script"}
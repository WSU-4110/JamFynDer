{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport function getBaseProps(props) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  return {\n    axis: (_a = props === null || props === void 0 ? void 0 : props.axis) !== null && _a !== void 0 ? _a : 'x',\n    xMax: (_b = props === null || props === void 0 ? void 0 : props.xMax) !== null && _b !== void 0 ? _b : 100,\n    xMin: (_c = props === null || props === void 0 ? void 0 : props.xMin) !== null && _c !== void 0 ? _c : 0,\n    xStep: (_d = props === null || props === void 0 ? void 0 : props.xStep) !== null && _d !== void 0 ? _d : 1,\n    yMax: (_e = props === null || props === void 0 ? void 0 : props.yMax) !== null && _e !== void 0 ? _e : 100,\n    yMin: (_f = props === null || props === void 0 ? void 0 : props.yMin) !== null && _f !== void 0 ? _f : 0,\n    yStep: (_g = props === null || props === void 0 ? void 0 : props.yStep) !== null && _g !== void 0 ? _g : 1\n  };\n}\nexport function getCoordinates(event, lastPosition) {\n  if ('touches' in event) {\n    // eslint-disable-next-line unicorn/prefer-spread\n    var _a = __read(__spreadArray([], __read(Array.from(event.touches)), false), 1),\n      touch = _a[0];\n    return {\n      x: touch ? touch.clientX : lastPosition.x,\n      y: touch ? touch.clientY : lastPosition.y\n    };\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nexport function getPosition(position, props, el) {\n  var _a = getBaseProps(props),\n    axis = _a.axis,\n    xMax = _a.xMax,\n    xMin = _a.xMin,\n    xStep = _a.xStep,\n    yMax = _a.yMax,\n    yMin = _a.yMin,\n    yStep = _a.yStep;\n  var _b = (el === null || el === void 0 ? void 0 : el.getBoundingClientRect()) || {},\n    _c = _b.height,\n    height = _c === void 0 ? xMax : _c,\n    _d = _b.width,\n    width = _d === void 0 ? yMax : _d;\n  var x = position.x,\n    y = position.y;\n  var dx = 0;\n  var dy = 0;\n  if (x < 0) {\n    x = 0;\n  }\n  if (x > width) {\n    x = width;\n  }\n  if (y < 0) {\n    y = 0;\n  }\n  if (y > height) {\n    y = height;\n  }\n  if (axis === 'x' || axis === 'xy') {\n    dx = Math.round(x / width * (xMax - xMin));\n  }\n  if (axis === 'y' || axis === 'xy') {\n    dy = Math.round(y / height * (yMax - yMin));\n  }\n  return {\n    x: round(dx, xStep),\n    y: round(dy, yStep)\n  };\n}\n/**\n * Get a normalized value\n */\nexport function getNormalizedValue(name, props) {\n  var value = props[name] || 0;\n  var min = name === 'x' ? props.xMin : props.yMin;\n  var max = name === 'x' ? props.xMax : props.yMax;\n  if (isNumber(min) && value < min) {\n    return min;\n  }\n  if (isNumber(max) && value > max) {\n    return max;\n  }\n  return value;\n}\n/**\n * Check if the value is a number\n */\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n/**\n * Check if the value is undefined\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Parse a string into a number or return it if it's already a number\n */\nexport function parseNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return parseInt(value, 10);\n}\n/**\n *  Remove properties from an object\n */\nexport function removeProperties(input) {\n  var filter = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    filter[_i - 1] = arguments[_i];\n  }\n  var output = {};\n  for (var key in input) {\n    /* istanbul ignore else */\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n  return output;\n}\nexport function round(value, increment) {\n  return Math.ceil(value / increment) * increment;\n}","map":null,"metadata":{},"sourceType":"module"}
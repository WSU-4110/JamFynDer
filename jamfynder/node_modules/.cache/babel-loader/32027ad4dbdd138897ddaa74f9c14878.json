{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\n/* eslint-disable camelcase */\nimport * as React from 'react';\nimport memoize from 'memoize-one';\nimport Actions from './components/Actions';\nimport Content from './components/Content';\nimport Controls from './components/Controls';\nimport ErrorMessage from './components/ErrorMessage';\nimport Info from './components/Info';\nimport Loader from './components/Loader';\nimport Player from './components/Player';\nimport Slider from './components/Slider';\nimport { getDevices, getPlaybackState, next, pause, play, previous, seek, setDevice, setVolume } from './spotify';\nimport { getMergedStyles } from './styles';\nimport { getLocale, getSpotifyURIType, isEqualArray, loadSpotifyPlayer, parseVolume, round, STATUS, TYPE, validateURI } from './utils';\nvar SpotifyWebPlayer = /** @class */function (_super) {\n  __extends(SpotifyWebPlayer, _super);\n  function SpotifyWebPlayer(props) {\n    var _this = _super.call(this, props) || this;\n    Object.defineProperty(_this, \"isActive\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"emptyTrack\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        artists: [],\n        durationMs: 0,\n        id: '',\n        image: '',\n        name: '',\n        uri: ''\n      }\n    });\n    Object.defineProperty(_this, \"getPlayOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: memoize(function (data) {\n        var playOptions = {\n          context_uri: undefined,\n          uris: undefined\n        };\n        /* istanbul ignore else */\n        if (data) {\n          var ids = Array.isArray(data) ? data : [data];\n          if (!ids.every(function (d) {\n            return validateURI(d);\n          })) {\n            // eslint-disable-next-line no-console\n            console.error('Invalid URI');\n            return playOptions;\n          }\n          if (ids.some(function (d) {\n            return getSpotifyURIType(d) === 'track';\n          })) {\n            if (!ids.every(function (d) {\n              return getSpotifyURIType(d) === 'track';\n            })) {\n              // eslint-disable-next-line no-console\n              console.warn(\"You can't mix tracks URIs with other types\");\n            }\n            playOptions.uris = ids.filter(function (d) {\n              return validateURI(d) && getSpotifyURIType(d) === 'track';\n            });\n          } else {\n            if (ids.length > 1) {\n              // eslint-disable-next-line no-console\n              console.warn(\"Albums, Artists, Playlists and Podcasts can't have multiple URIs\");\n            }\n            // eslint-disable-next-line prefer-destructuring\n            playOptions.context_uri = ids[0];\n          }\n        }\n        return playOptions;\n      })\n    });\n    Object.defineProperty(_this, \"hasNewToken\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"player\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"playerProgressInterval\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"playerSyncInterval\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"ref\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: React.createRef()\n    });\n    Object.defineProperty(_this, \"seekUpdateInterval\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 100\n    });\n    Object.defineProperty(_this, \"styles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"syncTimeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"handleChangeRange\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(position) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var track, _a, callback, token, progress, percentage, state, error_1;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                track = this.state.track;\n                _a = this.props, callback = _a.callback, token = _a.token;\n                progress = 0;\n                _b.label = 1;\n              case 1:\n                _b.trys.push([1, 8,, 9]);\n                percentage = position / 100;\n                if (!this.isExternalPlayer) return [3 /*break*/, 3];\n                progress = Math.round(track.durationMs * percentage);\n                return [4 /*yield*/, seek(token, progress)];\n              case 2:\n                _b.sent();\n                this.updateState({\n                  position: position,\n                  progressMs: progress\n                });\n                return [3 /*break*/, 7];\n              case 3:\n                if (!this.player) return [3 /*break*/, 7];\n                return [4 /*yield*/, this.player.getCurrentState()];\n              case 4:\n                state = _b.sent();\n                if (!state) return [3 /*break*/, 6];\n                progress = Math.round(state.track_window.current_track.duration_ms * percentage);\n                return [4 /*yield*/, this.player.seek(progress)];\n              case 5:\n                _b.sent();\n                this.updateState({\n                  position: position,\n                  progressMs: progress\n                });\n                return [3 /*break*/, 7];\n              case 6:\n                this.updateState({\n                  position: 0\n                });\n                _b.label = 7;\n              case 7:\n                if (callback) {\n                  callback(__assign(__assign({}, this.state), {\n                    type: TYPE.PROGRESS\n                  }));\n                }\n                return [3 /*break*/, 9];\n              case 8:\n                error_1 = _b.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_1);\n                return [3 /*break*/, 9];\n              case 9:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleClickTogglePlay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var isActive, error_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                isActive = this.state.isActive;\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.togglePlay(!this.isExternalPlayer && !isActive)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                error_2 = _a.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_2);\n                return [3 /*break*/, 4];\n              case 4:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleClickPrevious\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var token, error_3;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 5,, 6]);\n                if (!this.isExternalPlayer) return [3 /*break*/, 2];\n                token = this.props.token;\n                return [4 /*yield*/, previous(token)];\n              case 1:\n                _a.sent();\n                this.syncTimeout = window.setTimeout(function () {\n                  _this.syncDevice();\n                }, 300);\n                return [3 /*break*/, 4];\n              case 2:\n                if (!this.player) return [3 /*break*/, 4];\n                return [4 /*yield*/, this.player.previousTrack()];\n              case 3:\n                _a.sent();\n                _a.label = 4;\n              case 4:\n                return [3 /*break*/, 6];\n              case 5:\n                error_3 = _a.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_3);\n                return [3 /*break*/, 6];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleClickNext\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var token, error_4;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 5,, 6]);\n                if (!this.isExternalPlayer) return [3 /*break*/, 2];\n                token = this.props.token;\n                return [4 /*yield*/, next(token)];\n              case 1:\n                _a.sent();\n                this.syncTimeout = window.setTimeout(function () {\n                  _this.syncDevice();\n                }, 300);\n                return [3 /*break*/, 4];\n              case 2:\n                if (!this.player) return [3 /*break*/, 4];\n                return [4 /*yield*/, this.player.nextTrack()];\n              case 3:\n                _a.sent();\n                _a.label = 4;\n              case 4:\n                return [3 /*break*/, 6];\n              case 5:\n                error_4 = _a.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_4);\n                return [3 /*break*/, 6];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleClickDevice\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(deviceId) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var isUnsupported, _a, autoPlay, persistDeviceSelection, token, player, error_5;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                isUnsupported = this.state.isUnsupported;\n                _a = this.props, autoPlay = _a.autoPlay, persistDeviceSelection = _a.persistDeviceSelection, token = _a.token;\n                this.updateState({\n                  currentDeviceId: deviceId\n                });\n                _b.label = 1;\n              case 1:\n                _b.trys.push([1, 7,, 8]);\n                return [4 /*yield*/, setDevice(token, deviceId)];\n              case 2:\n                _b.sent();\n                /* istanbul ignore else */\n                if (persistDeviceSelection) {\n                  sessionStorage.setItem('rswpDeviceId', deviceId);\n                }\n                if (!isUnsupported) return [3 /*break*/, 6];\n                return [4 /*yield*/, this.syncDevice()];\n              case 3:\n                _b.sent();\n                return [4 /*yield*/, getPlaybackState(token)];\n              case 4:\n                player = _b.sent();\n                if (!(player && !player.is_playing && autoPlay)) return [3 /*break*/, 6];\n                return [4 /*yield*/, this.togglePlay(true)];\n              case 5:\n                _b.sent();\n                _b.label = 6;\n              case 6:\n                return [3 /*break*/, 8];\n              case 7:\n                error_5 = _b.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_5);\n                return [3 /*break*/, 8];\n              case 8:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleFavoriteStatusChange\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(status) {\n        var isSaved = _this.state.isSaved;\n        _this.updateState({\n          isSaved: status\n        });\n        /* istanbul ignore else */\n        if (isSaved !== status) {\n          _this.handleCallback(__assign(__assign({}, _this.state), {\n            isSaved: status,\n            type: TYPE.FAVORITE\n          }));\n        }\n      }\n    });\n    Object.defineProperty(_this, \"handlePlayerErrors\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(type, message) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var status, isPlaybackError, isInitializationError, nextStatus, devices, token;\n          var _a;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                status = this.state.status;\n                isPlaybackError = type === 'playback_error';\n                isInitializationError = type === 'initialization_error';\n                nextStatus = status;\n                devices = [];\n                if (!(this.player && !isPlaybackError)) return [3 /*break*/, 2];\n                return [4 /*yield*/, this.player.disconnect()];\n              case 1:\n                _b.sent();\n                _b.label = 2;\n              case 2:\n                if (!isInitializationError) return [3 /*break*/, 4];\n                nextStatus = STATUS.UNSUPPORTED;\n                token = this.props.token;\n                return [4 /*yield*/, getDevices(token)];\n              case 3:\n                _a = _b.sent().devices, devices = _a === void 0 ? [] : _a;\n                _b.label = 4;\n              case 4:\n                if (!isInitializationError && !isPlaybackError) {\n                  nextStatus = STATUS.ERROR;\n                }\n                this.updateState({\n                  devices: devices,\n                  error: message,\n                  errorType: type,\n                  isInitializing: false,\n                  isUnsupported: isInitializationError,\n                  status: nextStatus\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handlePlayerStateChanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(state) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var paused, position, _a, _b, album, artists, duration_ms, id, name_1, uri, next_tracks, previous_tracks, isPlaying, volume, track, trackState, error_6;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _c.trys.push([0, 6,, 7]);\n                if (!state) return [3 /*break*/, 2];\n                paused = state.paused, position = state.position, _a = state.track_window, _b = _a.current_track, album = _b.album, artists = _b.artists, duration_ms = _b.duration_ms, id = _b.id, name_1 = _b.name, uri = _b.uri, next_tracks = _a.next_tracks, previous_tracks = _a.previous_tracks;\n                isPlaying = !paused;\n                return [4 /*yield*/, this.player.getVolume()];\n              case 1:\n                volume = _c.sent();\n                track = {\n                  artists: artists,\n                  durationMs: duration_ms,\n                  id: id,\n                  image: this.setAlbumImage(album),\n                  name: name_1,\n                  uri: uri\n                };\n                trackState = void 0;\n                if (position === 0) {\n                  trackState = {\n                    nextTracks: next_tracks,\n                    position: 0,\n                    previousTracks: previous_tracks,\n                    track: track\n                  };\n                }\n                this.updateState(__assign({\n                  error: '',\n                  errorType: '',\n                  isActive: true,\n                  isPlaying: isPlaying,\n                  progressMs: position,\n                  volume: round(volume)\n                }, trackState));\n                return [3 /*break*/, 5];\n              case 2:\n                if (!this.isExternalPlayer) return [3 /*break*/, 4];\n                return [4 /*yield*/, this.syncDevice()];\n              case 3:\n                _c.sent();\n                return [3 /*break*/, 5];\n              case 4:\n                this.updateState({\n                  isActive: false,\n                  isPlaying: false,\n                  nextTracks: [],\n                  position: 0,\n                  previousTracks: [],\n                  track: {\n                    artists: '',\n                    durationMs: 0,\n                    id: '',\n                    image: '',\n                    name: '',\n                    uri: ''\n                  }\n                });\n                _c.label = 5;\n              case 5:\n                return [3 /*break*/, 7];\n              case 6:\n                error_6 = _c.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_6);\n                return [3 /*break*/, 7];\n              case 7:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handlePlayerStatus\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(_a) {\n        var device_id = _a.device_id;\n        return __awaiter(_this, void 0, void 0, function () {\n          var _b, currentDeviceId, devices;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4 /*yield*/, this.initializeDevices(device_id)];\n              case 1:\n                _b = _c.sent(), currentDeviceId = _b.currentDeviceId, devices = _b.devices;\n                this.updateState({\n                  currentDeviceId: currentDeviceId,\n                  deviceId: device_id,\n                  devices: devices,\n                  isInitializing: false,\n                  status: device_id ? STATUS.READY : STATUS.IDLE\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"handleToggleMagnify\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        var magnifySliderOnHover = _this.props.magnifySliderOnHover;\n        if (magnifySliderOnHover) {\n          _this.updateState(function (previousState) {\n            return {\n              isMagnified: !previousState.isMagnified\n            };\n          });\n        }\n      }\n    });\n    Object.defineProperty(_this, \"initializePlayer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        var volume = _this.state.volume;\n        var _a = _this.props,\n          _b = _a.name,\n          name = _b === void 0 ? 'Spotify Web Player' : _b,\n          token = _a.token;\n        if (!window.Spotify) {\n          return;\n        }\n        _this.updateState({\n          isInitializing: true\n        });\n        _this.player = new window.Spotify.Player({\n          getOAuthToken: function getOAuthToken(callback) {\n            callback(token);\n          },\n          name: name,\n          volume: volume\n        });\n        _this.player.addListener('ready', _this.handlePlayerStatus);\n        _this.player.addListener('not_ready', _this.handlePlayerStatus);\n        _this.player.addListener('player_state_changed', _this.handlePlayerStateChanges);\n        _this.player.addListener('initialization_error', function (error) {\n          return _this.handlePlayerErrors('initialization_error', error.message);\n        });\n        _this.player.addListener('authentication_error', function (error) {\n          return _this.handlePlayerErrors('authentication_error', error.message);\n        });\n        _this.player.addListener('account_error', function (error) {\n          return _this.handlePlayerErrors('account_error', error.message);\n        });\n        _this.player.addListener('playback_error', function (error) {\n          return _this.handlePlayerErrors('playback_error', error.message);\n        });\n        _this.player.connect();\n      }\n    });\n    // eslint-disable-next-line class-methods-use-this\n    Object.defineProperty(_this, \"setAlbumImage\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(album) {\n        var width = Math.min.apply(Math, __spreadArray([], __read(album.images.map(function (d) {\n          return d.width || 0;\n        })), false));\n        var thumb = album.images.find(function (d) {\n          return d.width === width;\n        }) || {};\n        return thumb.url;\n      }\n    });\n    Object.defineProperty(_this, \"setExternalDevice\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(id) {\n        _this.updateState({\n          currentDeviceId: id,\n          isPlaying: true\n        });\n      }\n    });\n    Object.defineProperty(_this, \"setVolume\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(volume) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var token;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                token = this.props.token;\n                if (!this.isExternalPlayer) return [3 /*break*/, 3];\n                return [4 /*yield*/, setVolume(token, Math.round(volume * 100))];\n              case 1:\n                _a.sent();\n                return [4 /*yield*/, this.syncDevice()];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 5];\n              case 3:\n                if (!this.player) return [3 /*break*/, 5];\n                return [4 /*yield*/, this.player.setVolume(volume)];\n              case 4:\n                _a.sent();\n                _a.label = 5;\n              case 5:\n                this.updateState({\n                  volume: volume\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"syncDevice\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var deviceId, token, player, track, error_7, state;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!this.isActive) {\n                  return [2 /*return*/];\n                }\n\n                deviceId = this.state.deviceId;\n                token = this.props.token;\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, getPlaybackState(token)];\n              case 2:\n                player = _a.sent();\n                track = this.emptyTrack;\n                if (!player) {\n                  throw new Error('No player');\n                }\n                /* istanbul ignore else */\n                if (player.item) {\n                  track = {\n                    artists: player.item.artists,\n                    durationMs: player.item.duration_ms,\n                    id: player.item.id,\n                    image: this.setAlbumImage(player.item.album),\n                    name: player.item.name,\n                    uri: player.item.uri\n                  };\n                }\n                this.updateState({\n                  error: '',\n                  errorType: '',\n                  isActive: true,\n                  isPlaying: player.is_playing,\n                  nextTracks: [],\n                  previousTracks: [],\n                  progressMs: player.item ? player.progress_ms : 0,\n                  status: STATUS.READY,\n                  track: track,\n                  volume: parseVolume(player.device.volume_percent)\n                });\n                return [3 /*break*/, 4];\n              case 3:\n                error_7 = _a.sent();\n                state = {\n                  isActive: false,\n                  isPlaying: false,\n                  position: 0,\n                  track: this.emptyTrack\n                };\n                if (deviceId) {\n                  this.updateState(__assign({\n                    currentDeviceId: deviceId\n                  }, state));\n                  return [2 /*return*/];\n                }\n\n                this.updateState(__assign({\n                  error: error_7.message,\n                  errorType: 'player_status',\n                  status: STATUS.ERROR\n                }, state));\n                return [3 /*break*/, 4];\n              case 4:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"toggleOffset\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, currentDeviceId, isPlaying, _b, offset, token, uris;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = this.state, currentDeviceId = _a.currentDeviceId, isPlaying = _a.isPlaying;\n                _b = this.props, offset = _b.offset, token = _b.token, uris = _b.uris;\n                if (!(isPlaying && typeof offset === 'number' && Array.isArray(uris))) return [3 /*break*/, 2];\n                return [4 /*yield*/, play(token, {\n                  deviceId: currentDeviceId,\n                  offset: offset,\n                  uris: uris\n                })];\n              case 1:\n                _c.sent();\n                _c.label = 2;\n              case 2:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"togglePlay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(init) {\n        if (init === void 0) {\n          init = false;\n        }\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, currentDeviceId, isPlaying, needsUpdate, _b, offset, token, uris, shouldInitialize, playOptions, playerState, error_8;\n          var _this = this;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = this.state, currentDeviceId = _a.currentDeviceId, isPlaying = _a.isPlaying, needsUpdate = _a.needsUpdate;\n                _b = this.props, offset = _b.offset, token = _b.token, uris = _b.uris;\n                shouldInitialize = init || needsUpdate;\n                playOptions = this.getPlayOptions(uris);\n                _c.label = 1;\n              case 1:\n                _c.trys.push([1, 13,, 14]);\n                if (!this.isExternalPlayer) return [3 /*break*/, 6];\n                if (!!isPlaying) return [3 /*break*/, 3];\n                return [4 /*yield*/, play(token, __assign({\n                  deviceId: currentDeviceId,\n                  offset: offset\n                }, shouldInitialize ? playOptions : undefined))];\n              case 2:\n                _c.sent();\n                return [3 /*break*/, 5];\n              case 3:\n                return [4 /*yield*/, pause(token)];\n              case 4:\n                _c.sent();\n                this.updateState({\n                  isPlaying: false\n                });\n                _c.label = 5;\n              case 5:\n                this.syncTimeout = window.setTimeout(function () {\n                  _this.syncDevice();\n                }, 300);\n                return [3 /*break*/, 12];\n              case 6:\n                if (!this.player) return [3 /*break*/, 12];\n                return [4 /*yield*/, this.player.getCurrentState()];\n              case 7:\n                playerState = _c.sent();\n                return [4 /*yield*/, this.player.activateElement()];\n              case 8:\n                _c.sent();\n                if (!(!playerState && !!(playOptions.context_uri || playOptions.uris) || shouldInitialize && playerState && playerState.paused)) return [3 /*break*/, 10];\n                return [4 /*yield*/, play(token, __assign({\n                  deviceId: currentDeviceId,\n                  offset: offset\n                }, shouldInitialize ? playOptions : undefined))];\n              case 9:\n                _c.sent();\n                return [3 /*break*/, 12];\n              case 10:\n                return [4 /*yield*/, this.player.togglePlay()];\n              case 11:\n                _c.sent();\n                _c.label = 12;\n              case 12:\n                if (needsUpdate) {\n                  this.updateState({\n                    needsUpdate: false\n                  });\n                }\n                return [3 /*break*/, 14];\n              case 13:\n                error_8 = _c.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_8);\n                return [3 /*break*/, 14];\n              case 14:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"updateSeekBar\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value() {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, progressMs, track, position, state, progress, position, error_9;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                if (!this.isActive) {\n                  return [2 /*return*/];\n                }\n\n                _a = this.state, progressMs = _a.progressMs, track = _a.track;\n                _b.label = 1;\n              case 1:\n                _b.trys.push([1, 5,, 6]);\n                if (!this.isExternalPlayer) return [3 /*break*/, 2];\n                position = progressMs / track.durationMs;\n                position = Number(((Number.isFinite(position) ? position : 0) * 100).toFixed(1));\n                this.updateState({\n                  position: position,\n                  progressMs: progressMs + this.seekUpdateInterval\n                });\n                return [3 /*break*/, 4];\n              case 2:\n                if (!this.player) return [3 /*break*/, 4];\n                return [4 /*yield*/, this.player.getCurrentState()];\n              case 3:\n                state = _b.sent();\n                /* istanbul ignore else */\n                if (state) {\n                  progress = state.position;\n                  position = Number((progress / state.track_window.current_track.duration_ms * 100).toFixed(1));\n                  this.updateState({\n                    position: position,\n                    progressMs: progress + this.seekUpdateInterval\n                  });\n                }\n                _b.label = 4;\n              case 4:\n                return [3 /*break*/, 6];\n              case 5:\n                error_9 = _b.sent();\n                // eslint-disable-next-line no-console\n                console.error(error_9);\n                return [3 /*break*/, 6];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }\n    });\n\n    Object.defineProperty(_this, \"updateState\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function value(state) {\n        if (state === void 0) {\n          state = {};\n        }\n        if (!_this.isActive) {\n          return;\n        }\n        _this.setState(state);\n      }\n    });\n    _this.state = {\n      currentDeviceId: '',\n      deviceId: '',\n      devices: [],\n      error: '',\n      errorType: '',\n      isActive: false,\n      isInitializing: false,\n      isMagnified: false,\n      isPlaying: false,\n      isSaved: false,\n      isUnsupported: false,\n      needsUpdate: false,\n      nextTracks: [],\n      playerPosition: 'bottom',\n      position: 0,\n      previousTracks: [],\n      progressMs: 0,\n      status: STATUS.IDLE,\n      track: _this.emptyTrack,\n      volume: parseVolume(props.initialVolume) || 1\n    };\n    _this.styles = getMergedStyles(props.styles);\n    return _this;\n  }\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"componentDidMount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _a;\n      return __awaiter(this, void 0, void 0, function () {\n        var _b, top;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.isActive = true;\n              _b = (((_a = this.ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {}).top, top = _b === void 0 ? 0 : _b;\n              this.updateState({\n                playerPosition: top > window.innerHeight / 2 ? 'bottom' : 'top',\n                status: STATUS.INITIALIZING\n              });\n              if (!window.onSpotifyWebPlaybackSDKReady) {\n                window.onSpotifyWebPlaybackSDKReady = this.initializePlayer;\n              } else {\n                this.initializePlayer();\n              }\n              return [4 /*yield*/, loadSpotifyPlayer()];\n            case 1:\n              _c.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"componentDidUpdate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(previousProps, previousState) {\n      return __awaiter(this, void 0, void 0, function () {\n        var _a, currentDeviceId, deviceId, error, isInitializing, isPlaying, status, track, _b, autoPlay, offset, playProp, showSaveIcon, syncExternalDevice, token, uris, isReady, changedURIs, playOptions, canPlay, shouldPlay, player;\n        var _this = this;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              _a = this.state, currentDeviceId = _a.currentDeviceId, deviceId = _a.deviceId, error = _a.error, isInitializing = _a.isInitializing, isPlaying = _a.isPlaying, status = _a.status, track = _a.track;\n              _b = this.props, autoPlay = _b.autoPlay, offset = _b.offset, playProp = _b.play, showSaveIcon = _b.showSaveIcon, syncExternalDevice = _b.syncExternalDevice, token = _b.token, uris = _b.uris;\n              isReady = previousState.status !== STATUS.READY && status === STATUS.READY;\n              changedURIs = Array.isArray(uris) ? !isEqualArray(previousProps.uris, uris) : previousProps.uris !== uris;\n              playOptions = this.getPlayOptions(uris);\n              canPlay = !!currentDeviceId && !!(playOptions.context_uri || playOptions.uris);\n              shouldPlay = changedURIs && isPlaying || !!(isReady && (autoPlay || playProp));\n              if (!(canPlay && shouldPlay)) return [3 /*break*/, 2];\n              return [4 /*yield*/, play(token, __assign({\n                deviceId: currentDeviceId,\n                offset: offset\n              }, playOptions))];\n            case 1:\n              _c.sent();\n              /* istanbul ignore else */\n              if (!isPlaying) {\n                this.updateState({\n                  isPlaying: true\n                });\n              }\n              if (this.isExternalPlayer) {\n                this.syncTimeout = window.setTimeout(function () {\n                  _this.syncDevice();\n                }, 600);\n              }\n              return [3 /*break*/, 3];\n            case 2:\n              if (changedURIs && !isPlaying) {\n                this.updateState({\n                  needsUpdate: true\n                });\n              }\n              _c.label = 3;\n            case 3:\n              if (previousState.status !== status) {\n                this.handleCallback(__assign(__assign({}, this.state), {\n                  type: TYPE.STATUS\n                }));\n              }\n              if (!(previousState.currentDeviceId !== currentDeviceId && currentDeviceId)) return [3 /*break*/, 6];\n              if (!isReady) {\n                this.handleCallback(__assign(__assign({}, this.state), {\n                  type: TYPE.DEVICE\n                }));\n              }\n              return [4 /*yield*/, this.toggleSyncInterval(this.isExternalPlayer)];\n            case 4:\n              _c.sent();\n              return [4 /*yield*/, this.updateSeekBar()];\n            case 5:\n              _c.sent();\n              _c.label = 6;\n            case 6:\n              if (previousState.track.id !== track.id && track.id) {\n                this.handleCallback(__assign(__assign({}, this.state), {\n                  type: TYPE.TRACK\n                }));\n                if (showSaveIcon) {\n                  this.updateState({\n                    isSaved: false\n                  });\n                }\n              }\n              if (!(previousState.isPlaying !== isPlaying)) return [3 /*break*/, 8];\n              this.toggleProgressBar();\n              return [4 /*yield*/, this.toggleSyncInterval(this.isExternalPlayer)];\n            case 7:\n              _c.sent();\n              this.handleCallback(__assign(__assign({}, this.state), {\n                type: TYPE.PLAYER\n              }));\n              _c.label = 8;\n            case 8:\n              if (token && previousProps.token !== token) {\n                this.hasNewToken = true;\n                if (!isInitializing) {\n                  this.initializePlayer();\n                } else {\n                  this.hasNewToken = true;\n                }\n              }\n              if (!(previousProps.play !== playProp && playProp !== isPlaying)) return [3 /*break*/, 10];\n              return [4 /*yield*/, this.togglePlay(!track.id)];\n            case 9:\n              _c.sent();\n              _c.label = 10;\n            case 10:\n              if (!(previousProps.offset !== offset)) return [3 /*break*/, 12];\n              return [4 /*yield*/, this.toggleOffset()];\n            case 11:\n              _c.sent();\n              _c.label = 12;\n            case 12:\n              if (!(previousState.isInitializing && !isInitializing)) return [3 /*break*/, 14];\n              if (error === 'authentication_error' && this.hasNewToken) {\n                this.hasNewToken = false;\n                this.initializePlayer();\n              }\n              if (!(syncExternalDevice && !uris)) return [3 /*break*/, 14];\n              return [4 /*yield*/, getPlaybackState(token)];\n            case 13:\n              player = _c.sent();\n              /* istanbul ignore else */\n              if (player && player.is_playing && player.device.id !== deviceId) {\n                this.setExternalDevice(player.device.id);\n              }\n              _c.label = 14;\n            case 14:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"componentWillUnmount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.isActive = false;\n              if (!this.player) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.player.disconnect()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              clearInterval(this.playerSyncInterval);\n              clearInterval(this.playerProgressInterval);\n              clearTimeout(this.syncTimeout);\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"isExternalPlayer\", {\n    get: function get() {\n      var _a = this.state,\n        currentDeviceId = _a.currentDeviceId,\n        deviceId = _a.deviceId,\n        status = _a.status;\n      return currentDeviceId && currentDeviceId !== deviceId || status === STATUS.UNSUPPORTED;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"handleCallback\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(state) {\n      var callback = this.props.callback;\n      if (callback) {\n        callback(state);\n      }\n    }\n  });\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"initializeDevices\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(id) {\n      return __awaiter(this, void 0, void 0, function () {\n        var _a, persistDeviceSelection, token, devices, currentDeviceId, savedDeviceId_1;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = this.props, persistDeviceSelection = _a.persistDeviceSelection, token = _a.token;\n              return [4 /*yield*/, getDevices(token)];\n            case 1:\n              devices = _b.sent().devices;\n              currentDeviceId = id;\n              if (persistDeviceSelection) {\n                savedDeviceId_1 = sessionStorage.getItem('rswpDeviceId');\n                /* istanbul ignore else */\n                if (!savedDeviceId_1 || !devices.some(function (d) {\n                  return d.id === savedDeviceId_1;\n                })) {\n                  sessionStorage.setItem('rswpDeviceId', currentDeviceId);\n                } else {\n                  currentDeviceId = savedDeviceId_1;\n                }\n              }\n              return [2 /*return*/, {\n                currentDeviceId: currentDeviceId,\n                devices: devices\n              }];\n          }\n        });\n      });\n    }\n  });\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"toggleSyncInterval\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value(shouldSync) {\n      return __awaiter(this, void 0, void 0, function () {\n        var syncExternalDeviceInterval, error_10;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              syncExternalDeviceInterval = this.props.syncExternalDeviceInterval;\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              if (!(this.isExternalPlayer && shouldSync && !this.playerSyncInterval)) return [3 /*break*/, 3];\n              return [4 /*yield*/, this.syncDevice()];\n            case 2:\n              _a.sent();\n              clearInterval(this.playerSyncInterval);\n              this.playerSyncInterval = window.setInterval(this.syncDevice, syncExternalDeviceInterval * 1000);\n              _a.label = 3;\n            case 3:\n              if ((!shouldSync || !this.isExternalPlayer) && this.playerSyncInterval) {\n                clearInterval(this.playerSyncInterval);\n                this.playerSyncInterval = undefined;\n              }\n              return [3 /*break*/, 5];\n            case 4:\n              error_10 = _a.sent();\n              // eslint-disable-next-line no-console\n              console.error(error_10);\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n  });\n\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"toggleProgressBar\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var isPlaying = this.state.isPlaying;\n      /* istanbul ignore else */\n      if (isPlaying) {\n        /* istanbul ignore else */\n        if (!this.playerProgressInterval) {\n          this.playerProgressInterval = window.setInterval(this.updateSeekBar, this.seekUpdateInterval);\n        }\n      } else if (this.playerProgressInterval) {\n        clearInterval(this.playerProgressInterval);\n        this.playerProgressInterval = undefined;\n      }\n    }\n  });\n  Object.defineProperty(SpotifyWebPlayer.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function value() {\n      var _a = this.state,\n        currentDeviceId = _a.currentDeviceId,\n        deviceId = _a.deviceId,\n        devices = _a.devices,\n        error = _a.error,\n        errorType = _a.errorType,\n        isActive = _a.isActive,\n        isMagnified = _a.isMagnified,\n        isPlaying = _a.isPlaying,\n        isUnsupported = _a.isUnsupported,\n        nextTracks = _a.nextTracks,\n        playerPosition = _a.playerPosition,\n        position = _a.position,\n        previousTracks = _a.previousTracks,\n        status = _a.status,\n        track = _a.track,\n        volume = _a.volume;\n      var _b = this.props,\n        locale = _b.locale,\n        name = _b.name,\n        showSaveIcon = _b.showSaveIcon,\n        token = _b.token,\n        updateSavedStatus = _b.updateSavedStatus;\n      var isReady = [STATUS.READY, STATUS.UNSUPPORTED].indexOf(status) >= 0;\n      var isPlaybackError = errorType === 'playback_error';\n      var localeMerged = getLocale(locale);\n      var output = _jsx(Loader, {\n        styles: this.styles\n      });\n      var info;\n      if (isPlaybackError) {\n        info = _jsx(\"p\", {\n          children: error\n        });\n      }\n      if (isReady) {\n        /* istanbul ignore else */\n        if (!info) {\n          info = _jsx(Info, {\n            isActive: isActive,\n            locale: localeMerged,\n            onFavoriteStatusChange: this.handleFavoriteStatusChange,\n            showSaveIcon: showSaveIcon,\n            styles: this.styles,\n            token: token,\n            track: track,\n            updateSavedStatus: updateSavedStatus\n          });\n        }\n        output = _jsxs(_Fragment, {\n          children: [_jsx(\"div\", {\n            children: info\n          }), _jsx(Controls, {\n            isExternalDevice: this.isExternalPlayer,\n            isPlaying: isPlaying,\n            locale: localeMerged,\n            nextTracks: nextTracks,\n            onClickNext: this.handleClickNext,\n            onClickPrevious: this.handleClickPrevious,\n            onClickTogglePlay: this.handleClickTogglePlay,\n            previousTracks: previousTracks,\n            styles: this.styles\n          }), _jsx(Actions, {\n            currentDeviceId: currentDeviceId,\n            deviceId: deviceId,\n            devices: devices,\n            isDevicesOpen: isUnsupported && !deviceId,\n            locale: localeMerged,\n            onClickDevice: this.handleClickDevice,\n            playerPosition: playerPosition,\n            setVolume: this.setVolume,\n            styles: this.styles,\n            volume: volume\n          })]\n        });\n      }\n      if (status === STATUS.ERROR) {\n        output = _jsxs(ErrorMessage, __assign({\n          styles: this.styles\n        }, {\n          children: [name, \": \", error]\n        }));\n      }\n      return _jsxs(Player, __assign({\n        ref: this.ref,\n        styles: this.styles\n      }, {\n        children: [isReady && _jsx(Slider, {\n          isMagnified: isMagnified,\n          onChangeRange: this.handleChangeRange,\n          onToggleMagnify: this.handleToggleMagnify,\n          position: position,\n          styles: this.styles\n        }), _jsx(Content, __assign({\n          styles: this.styles\n        }, {\n          children: output\n        }))]\n      }));\n    }\n  });\n  // eslint-disable-next-line react/static-property-placement\n  Object.defineProperty(SpotifyWebPlayer, \"defaultProps\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n      magnifySliderOnHover: false,\n      name: 'Spotify Web Player',\n      showSaveIcon: false,\n      syncExternalDeviceInterval: 5,\n      syncExternalDevice: false\n    }\n  });\n  return SpotifyWebPlayer;\n}(React.PureComponent);\nexport * from './types';\nexport default SpotifyWebPlayer;\nexport { STATUS, TYPE } from './utils';","map":null,"metadata":{},"sourceType":"module"}
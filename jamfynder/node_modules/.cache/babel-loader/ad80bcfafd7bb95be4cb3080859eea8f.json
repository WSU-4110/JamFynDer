{"ast":null,"code":"'use strict';\n\nvar Request = function Request(builder) {\n  if (!builder) {\n    throw new Error('No builder supplied to constructor');\n  }\n  this.host = builder.host;\n  this.port = builder.port;\n  this.scheme = builder.scheme;\n  this.queryParameters = builder.queryParameters;\n  this.bodyParameters = builder.bodyParameters;\n  this.headers = builder.headers;\n  this.path = builder.path;\n};\nRequest.prototype._getter = function (key) {\n  return function () {\n    return this[key];\n  };\n};\nRequest.prototype.getHost = Request.prototype._getter('host');\nRequest.prototype.getPort = Request.prototype._getter('port');\nRequest.prototype.getScheme = Request.prototype._getter('scheme');\nRequest.prototype.getPath = Request.prototype._getter('path');\nRequest.prototype.getQueryParameters = Request.prototype._getter('queryParameters');\nRequest.prototype.getBodyParameters = Request.prototype._getter('bodyParameters');\nRequest.prototype.getHeaders = Request.prototype._getter('headers');\nRequest.prototype.getURI = function () {\n  if (!this.scheme || !this.host || !this.port) {\n    throw new Error('Missing components necessary to construct URI');\n  }\n  var uri = this.scheme + '://' + this.host;\n  if (this.scheme === 'http' && this.port !== 80 || this.scheme === 'https' && this.port !== 443) {\n    uri += ':' + this.port;\n  }\n  if (this.path) {\n    uri += this.path;\n  }\n  return uri;\n};\nRequest.prototype.getURL = function () {\n  var uri = this.getURI();\n  if (this.getQueryParameters()) {\n    return uri + this.getQueryParameterString(this.getQueryParameters());\n  } else {\n    return uri;\n  }\n};\nRequest.prototype.getQueryParameterString = function () {\n  var queryParameters = this.getQueryParameters();\n  if (queryParameters) {\n    return '?' + Object.keys(queryParameters).filter(function (key) {\n      return queryParameters[key] !== undefined;\n    }).map(function (key) {\n      return key + '=' + queryParameters[key];\n    }).join('&');\n  }\n};\nRequest.prototype.execute = function (method, callback) {\n  if (callback) {\n    method(this, callback);\n    return;\n  }\n  var _self = this;\n  return new Promise(function (resolve, reject) {\n    method(_self, function (error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\nvar Builder = function Builder() {};\nBuilder.prototype._setter = function (key) {\n  return function (value) {\n    this[key] = value;\n    return this;\n  };\n};\nBuilder.prototype.withHost = Builder.prototype._setter('host');\nBuilder.prototype.withPort = Builder.prototype._setter('port');\nBuilder.prototype.withScheme = Builder.prototype._setter('scheme');\nBuilder.prototype.withPath = Builder.prototype._setter('path');\nBuilder.prototype._assigner = function (key) {\n  return function () {\n    for (var i = 0; i < arguments.length; i++) {\n      this[key] = this._assign(this[key], arguments[i]);\n    }\n    return this;\n  };\n};\nBuilder.prototype.withQueryParameters = Builder.prototype._assigner('queryParameters');\nBuilder.prototype.withBodyParameters = Builder.prototype._assigner('bodyParameters');\nBuilder.prototype.withHeaders = Builder.prototype._assigner('headers');\nBuilder.prototype.withAuth = function (accessToken) {\n  if (accessToken) {\n    this.withHeaders({\n      Authorization: 'Bearer ' + accessToken\n    });\n  }\n  return this;\n};\nBuilder.prototype._assign = function (src, obj) {\n  if (obj && Array.isArray(obj)) {\n    return obj;\n  }\n  if (obj && typeof obj === 'string') {\n    return obj;\n  }\n  if (obj && Object.keys(obj).length > 0) {\n    return Object.assign(src || {}, obj);\n  }\n  return src;\n};\nBuilder.prototype.build = function () {\n  return new Request(this);\n};\nmodule.exports.builder = function () {\n  return new Builder();\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar superagent = require('superagent'),\n  _require = require('./response-error'),\n  TimeoutError = _require.TimeoutError,\n  WebapiError = _require.WebapiError,\n  WebapiRegularError = _require.WebapiRegularError,\n  WebapiAuthenticationError = _require.WebapiAuthenticationError,\n  WebapiPlayerError = _require.WebapiPlayerError;\nvar HttpManager = {};\n\n/* Create superagent options from the base request */\nvar _getParametersFromRequest = function _getParametersFromRequest(request) {\n  var options = {};\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n  if (request.getHeaders() && request.getHeaders()['Content-Type'] === 'application/json') {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n  return options;\n};\nvar _toError = function _toError(response) {\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'object' && response.body.error.reason) {\n    return new WebapiPlayerError(response.body, response.headers, response.statusCode);\n  }\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'object') {\n    return new WebapiRegularError(response.body, response.headers, response.statusCode);\n  }\n  if (typeof response.body === 'object' && response.body.error && typeof response.body.error === 'string') {\n    return new WebapiAuthenticationError(response.body, response.headers, response.statusCode);\n  }\n\n  /* Other type of error, or unhandled Web API error format */\n  return new WebapiError(response.body, response.headers, response.statusCode, response.body);\n};\n\n/* Make the request to the Web API */\nHttpManager._makeRequest = function (method, options, uri, callback) {\n  var req = method.bind(superagent)(uri);\n  if (options.query) {\n    req.query(options.query);\n  }\n  if (options.headers) {\n    req.set(options.headers);\n  }\n  if (options.data) {\n    req.send(options.data);\n  }\n  req.end(function (err, response) {\n    if (err) {\n      if (err.timeout) {\n        return callback(new TimeoutError());\n      } else if (err.response) {\n        return callback(_toError(err.response));\n      } else {\n        return callback(err);\n      }\n    }\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.get = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.get;\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.post = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.post;\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.del = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.del;\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.put = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.put;\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\nmodule.exports = HttpManager;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  write: write\n};\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar rfc4253 = require('./rfc4253');\n\nvar Key = require('../key');\n\nvar SSHBuffer = require('../ssh-buffer');\n\nvar crypto = require('crypto');\n\nvar PrivateKey = require('../private-key');\n\nvar errors = require('../errors'); // https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\n\n\nfunction read(buf, options) {\n  var lines = buf.toString('ascii').split(/[\\r\\n]+/);\n  var found = false;\n  var parts;\n  var si = 0;\n  var formatVersion;\n\n  while (si < lines.length) {\n    parts = splitHeader(lines[si++]);\n\n    if (parts) {\n      formatVersion = {\n        'putty-user-key-file-2': 2,\n        'putty-user-key-file-3': 3\n      }[parts[0].toLowerCase()];\n\n      if (formatVersion) {\n        found = true;\n        break;\n      }\n    }\n  }\n\n  if (!found) {\n    throw new Error('No PuTTY format first line found');\n  }\n\n  var alg = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'encryption');\n  var encryption = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'comment');\n  var comment = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'public-lines');\n  var publicLines = parseInt(parts[1], 10);\n\n  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n    throw new Error('Invalid public-lines count');\n  }\n\n  var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');\n  var keyType = rfc4253.algToKeyType(alg);\n  var key = rfc4253.read(publicBuf);\n\n  if (key.type !== keyType) {\n    throw new Error('Outer key algorithm mismatch');\n  }\n\n  si += publicLines;\n\n  if (lines[si]) {\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), 'private-lines');\n    var privateLines = parseInt(parts[1], 10);\n\n    if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n      throw new Error('Invalid private-lines count');\n    }\n\n    var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(''), 'base64');\n\n    if (encryption !== 'none' && formatVersion === 3) {\n      throw new Error('Encrypted keys arenot supported for' + ' PuTTY format version 3');\n    }\n\n    if (encryption === 'aes256-cbc') {\n      if (!options.passphrase) {\n        throw new errors.KeyEncryptedError(options.filename, 'PEM');\n      }\n\n      var iv = Buffer.alloc(16, 0);\n      var decipher = crypto.createDecipheriv('aes-256-cbc', derivePPK2EncryptionKey(options.passphrase), iv);\n      decipher.setAutoPadding(false);\n      privateBuf = Buffer.concat([decipher.update(privateBuf), decipher.final()]);\n    }\n\n    key = new PrivateKey(key);\n\n    if (key.type !== keyType) {\n      throw new Error('Outer key algorithm mismatch');\n    }\n\n    var sshbuf = new SSHBuffer({\n      buffer: privateBuf\n    });\n    var privateKeyParts;\n\n    if (alg === 'ssh-dss') {\n      privateKeyParts = [{\n        name: 'x',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-rsa') {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'p',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'q',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'iqmp',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-ed25519') {\n      privateKeyParts = [{\n        name: 'k',\n        data: sshbuf.readBuffer()\n      }];\n    } else {\n      throw new Error('Unsupported PPK key type: ' + alg);\n    }\n\n    key = new PrivateKey({\n      type: key.type,\n      parts: key.parts.concat(privateKeyParts)\n    });\n  }\n\n  key.comment = comment;\n  return key;\n}\n\nfunction derivePPK2EncryptionKey(passphrase) {\n  var hash1 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(passphrase)])).digest();\n  var hash2 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 1]), Buffer.from(passphrase)])).digest();\n  return Buffer.concat([hash1, hash2]).slice(0, 32);\n}\n\nfunction splitHeader(line) {\n  var idx = line.indexOf(':');\n  if (idx === -1) return null;\n  var header = line.slice(0, idx);\n  ++idx;\n\n  while (line[idx] === ' ') {\n    ++idx;\n  }\n\n  var rest = line.slice(idx);\n  return [header, rest];\n}\n\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var alg = rfc4253.keyTypeToAlg(key);\n  var buf = rfc4253.write(key);\n  var comment = key.comment || '';\n  var b64 = buf.toString('base64');\n  var lines = wrap(b64, 64);\n  lines.unshift('Public-Lines: ' + lines.length);\n  lines.unshift('Comment: ' + comment);\n  lines.unshift('Encryption: none');\n  lines.unshift('PuTTY-User-Key-File-2: ' + alg);\n  return Buffer.from(lines.join('\\n') + '\\n');\n}\n\nfunction wrap(txt, len) {\n  var lines = [];\n  var pos = 0;\n\n  while (pos < txt.length) {\n    lines.push(txt.slice(pos, pos + 64));\n    pos += 64;\n  }\n\n  return lines;\n}","map":null,"metadata":{},"sourceType":"script"}
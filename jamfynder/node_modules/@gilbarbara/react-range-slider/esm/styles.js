var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { deepmerge } from 'deepmerge-ts';
import { parseNumber } from './utils';
var defaultOptions = {
    height: '20px',
    padding: '6px',
    rangeColor: '#007bff',
    thumbBorder: '2px solid #000',
    thumbBorderRadius: '4px',
    thumbBorderRadiusXY: '50%',
    thumbColor: '#fff',
    thumbSize: '10px',
    thumbSizeXY: '20px',
    thumbSpace: '6px',
    trackBorderRadius: '3px',
    trackColor: '#ccc',
    width: '20px',
};
export default function getStyles(styles) {
    var options = deepmerge(defaultOptions, styles ? styles.options : {});
    var slider = {
        boxSizing: 'border-box',
        display: 'inline-block',
        padding: options.padding,
        transition: 'height 0.4s, width 0.4s',
    };
    var track = {
        backgroundColor: options.trackColor,
        borderRadius: options.trackBorderRadius,
        boxSizing: 'border-box',
        height: '100%',
        position: 'relative',
        width: '100%',
    };
    var range = {
        backgroundColor: options.rangeColor,
        borderRadius: options.trackBorderRadius,
        position: 'absolute',
    };
    var rail = {
        boxSizing: 'border-box',
        height: options.height,
        position: 'absolute',
        transition: 'height 0.4s, width 0.4s',
        width: options.width,
    };
    var thumb = {
        backgroundColor: options.thumbColor,
        border: options.thumbBorder,
        borderRadius: options.thumbBorderRadius,
        boxSizing: 'border-box',
        display: 'block',
        position: 'absolute',
        transition: 'height 0.4s, width 0.4s',
    };
    var defaultStyles = {
        rail: rail,
        rangeX: __assign(__assign({}, range), { height: '100%', top: 0 }),
        rangeXY: __assign(__assign({}, range), { bottom: 0 }),
        rangeY: __assign(__assign({}, range), { bottom: 0, left: 0, width: '100%' }),
        sliderX: __assign(__assign({}, slider), { height: parseNumber(options.height) + parseNumber(options.padding) * 2, width: '100%' }),
        sliderXY: __assign(__assign({}, slider), { height: '100%', width: '100%' }),
        sliderY: __assign(__assign({}, slider), { height: '100%', width: parseNumber(options.width) + parseNumber(options.padding) * 2 }),
        thumbX: __assign(__assign({}, thumb), { height: parseNumber(options.height) + parseNumber(options.thumbSpace), left: -(parseNumber(options.thumbSize) / 2), top: -(parseNumber(options.thumbSpace) / 2), width: options.thumbSize }),
        thumbXY: __assign(__assign({}, thumb), { backgroundColor: 'transparent', border: options.thumbBorder, borderRadius: options.thumbBorderRadiusXY, bottom: -(parseNumber(options.thumbSizeXY) / 2), height: options.thumbSizeXY, left: -(parseNumber(options.thumbSizeXY) / 2), position: 'absolute', width: options.thumbSizeXY }),
        thumbY: __assign(__assign({}, thumb), { bottom: -(parseNumber(options.thumbSize) / 2), height: options.thumbSize, left: -(parseNumber(options.thumbSpace) / 2), width: parseNumber(options.width) + parseNumber(options.thumbSpace) }),
        trackX: __assign(__assign({}, track), { height: options.height }),
        trackXY: __assign(__assign({}, track), { height: '100%', minHeight: '50px', width: '100%' }),
        trackY: __assign(__assign({}, track), { height: '100%', minHeight: '50px', width: options.width }),
    };
    return deepmerge(defaultStyles, styles || {});
}
//# sourceMappingURL=styles.js.map
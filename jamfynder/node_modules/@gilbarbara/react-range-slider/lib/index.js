"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styles_1 = require("./styles");
var utils_1 = require("./utils");
var RangeSlider = /** @class */ (function (_super) {
    __extends(RangeSlider, _super);
    function RangeSlider(props) {
        var _this = _super.call(this, props) || this;
        _this.lastCoordinates = { x: 0, y: 0 };
        _this.mounted = false;
        _this.offset = { x: 0, y: 0 };
        _this.start = { x: 0, y: 0 };
        _this.getDragPosition = function (_a) {
            var x = _a.x, y = _a.y;
            return {
                x: x + _this.start.x - _this.offset.x,
                y: _this.offset.y + _this.start.y - y,
            };
        };
        _this.updateOptions = function (_a) {
            var _b, _c, _d, _e, _f, _g, _h, _j;
            var x = _a.x, y = _a.y;
            var _k = _this, rail = _k.rail, track = _k.track;
            _this.start = {
                x: (_c = (_b = rail.current) === null || _b === void 0 ? void 0 : _b.offsetLeft) !== null && _c !== void 0 ? _c : 0,
                y: ((_e = (_d = track.current) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0) -
                    ((_g = (_f = rail.current) === null || _f === void 0 ? void 0 : _f.offsetTop) !== null && _g !== void 0 ? _g : 0) -
                    ((_j = (_h = rail.current) === null || _h === void 0 ? void 0 : _h.offsetHeight) !== null && _j !== void 0 ? _j : 0),
            };
            _this.lastCoordinates = { x: x, y: y };
            _this.offset = { x: x, y: y };
        };
        _this.updatePosition = function (position) {
            _this.setState((0, utils_1.getPosition)(position, _this.props, _this.slider.current));
        };
        _this.handleBlur = function () {
            document.removeEventListener('keydown', _this.handleKeydown);
        };
        _this.handleClickTrack = function (event) {
            var onAfterEnd = _this.props.onAfterEnd;
            var isDragging = _this.state.isDragging;
            if (!isDragging) {
                var element = event.currentTarget;
                var _a = (0, utils_1.getCoordinates)(event, _this.lastCoordinates), x = _a.x, y = _a.y;
                var _b = element.getBoundingClientRect(), bottom = _b.bottom, left = _b.left;
                var nextPosition = {
                    x: x - left,
                    y: bottom - y,
                };
                _this.lastCoordinates = { x: x, y: y };
                _this.updatePosition(nextPosition);
                if (onAfterEnd) {
                    onAfterEnd((0, utils_1.getPosition)(nextPosition, _this.props, _this.slider.current), _this.props);
                }
            }
            else if (_this.mounted) {
                _this.setState({ isDragging: false });
            }
        };
        _this.handleDrag = function (event) {
            event.preventDefault();
            var coordinates = (0, utils_1.getCoordinates)(event, _this.lastCoordinates);
            _this.updatePosition(_this.getDragPosition(coordinates));
            _this.lastCoordinates = coordinates;
        };
        _this.handleDragEnd = function (event) {
            event.preventDefault();
            var _a = _this.props, onAfterEnd = _a.onAfterEnd, onDragEnd = _a.onDragEnd;
            var position = (0, utils_1.getPosition)(_this.getDragPosition((0, utils_1.getCoordinates)(event, _this.lastCoordinates)), _this.props, _this.slider.current);
            document.removeEventListener('mousemove', _this.handleDrag);
            document.removeEventListener('mouseup', _this.handleDragEnd);
            document.removeEventListener('touchmove', _this.handleDrag);
            document.removeEventListener('touchend', _this.handleDragEnd);
            document.removeEventListener('touchcancel', _this.handleDragEnd);
            /* istanbul ignore else */
            if (onDragEnd) {
                onDragEnd(position, _this.props);
            }
            /* istanbul ignore else */
            if (onAfterEnd) {
                onAfterEnd(position, _this.props);
            }
        };
        _this.handleFocus = function () {
            document.addEventListener('keydown', _this.handleKeydown, { passive: false });
        };
        _this.handleKeydown = function (event) {
            var _a = _this.state, innerX = _a.x, innerY = _a.y;
            var _b = _this.props, x = _b.x, y = _b.y;
            var _c = (0, utils_1.getBaseProps)(_this.props), axis = _c.axis, xMax = _c.xMax, xMin = _c.xMin, xStep = _c.xStep, yMax = _c.yMax, yMin = _c.yMin, yStep = _c.yStep;
            var codes = { down: 'ArrowDown', left: 'ArrowLeft', up: 'ArrowUp', right: 'ArrowRight' };
            /* istanbul ignore else */
            if (Object.values(codes).includes(event.code)) {
                event.preventDefault();
                var position = {
                    x: (0, utils_1.isUndefined)(x) ? innerX : (0, utils_1.getNormalizedValue)('x', _this.props),
                    y: (0, utils_1.isUndefined)(y) ? innerY : (0, utils_1.getNormalizedValue)('y', _this.props),
                };
                var xMinus = position.x - xStep <= xMin ? xMin : position.x - xStep;
                var xPlus = position.x + xStep >= xMax ? xMax : position.x + xStep;
                var yMinus = position.y - yStep <= yMin ? yMin : position.y - yStep;
                var yPlus = position.y + yStep >= yMax ? yMax : position.y + yStep;
                switch (event.code) {
                    case codes.up: {
                        if (axis === 'x') {
                            position.x = xPlus;
                        }
                        else {
                            position.y = yPlus;
                        }
                        break;
                    }
                    case codes.down: {
                        if (axis === 'x') {
                            position.x = xMinus;
                        }
                        else {
                            position.y = yMinus;
                        }
                        break;
                    }
                    case codes.left: {
                        if (axis === 'y') {
                            position.y = yMinus;
                        }
                        else {
                            position.x = xMinus;
                        }
                        break;
                    }
                    case codes.right:
                    default: {
                        if (axis === 'y') {
                            position.y = yPlus;
                        }
                        else {
                            position.x = xPlus;
                        }
                        break;
                    }
                }
                _this.setState(position);
            }
        };
        _this.handleMouseDown = function (event) {
            event.preventDefault();
            _this.updateOptions((0, utils_1.getCoordinates)(event, _this.lastCoordinates));
            _this.setState({ isDragging: true });
            document.addEventListener('mousemove', _this.handleDrag);
            document.addEventListener('mouseup', _this.handleDragEnd);
        };
        _this.handleTouchStart = function (event) {
            event.preventDefault();
            _this.updateOptions((0, utils_1.getCoordinates)(event, _this.lastCoordinates));
            document.addEventListener('touchmove', _this.handleDrag, { passive: false });
            document.addEventListener('touchend', _this.handleDragEnd, { passive: false });
            document.addEventListener('touchcancel', _this.handleDragEnd, { passive: false });
        };
        _this.slider = React.createRef();
        _this.rail = React.createRef();
        _this.track = React.createRef();
        _this.state = {
            isDragging: false,
            x: (0, utils_1.getNormalizedValue)('x', props),
            y: (0, utils_1.getNormalizedValue)('y', props),
        };
        return _this;
    }
    RangeSlider.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    RangeSlider.prototype.componentDidUpdate = function (_, previousState) {
        var _a = this.state, x = _a.x, y = _a.y;
        var onChange = this.props.onChange;
        var previousX = previousState.x, previousY = previousState.y;
        /* istanbul ignore else */
        if (onChange && (x !== previousX || y !== previousY)) {
            onChange({ x: x, y: y }, this.props);
        }
    };
    RangeSlider.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    Object.defineProperty(RangeSlider.prototype, "position", {
        get: function () {
            var _a = (0, utils_1.getBaseProps)(this.props), axis = _a.axis, xMax = _a.xMax, xMin = _a.xMin, yMax = _a.yMax, yMin = _a.yMin;
            var bottom = ((this.y - yMin) / (yMax - yMin)) * 100;
            var left = ((this.x - xMin) / (xMax - xMin)) * 100;
            if (bottom > 100) {
                bottom = 100;
            }
            if (bottom < 0) {
                bottom = 0;
            }
            // bottom shouldn't be set with X axis
            /* istanbul ignore else */
            if (axis === 'x') {
                bottom = 0;
            }
            if (left > 100) {
                left = 100;
            }
            if (left < 0) {
                left = 0;
            }
            // left shouldn't be set with Y axis
            /* istanbul ignore else */
            if (axis === 'y') {
                left = 0;
            }
            return { x: left, y: bottom };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeSlider.prototype, "styles", {
        get: function () {
            var styles = this.props.styles;
            return (0, styles_1.default)(styles);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeSlider.prototype, "x", {
        get: function () {
            var innerX = this.state.x;
            var x = this.props.x;
            return (0, utils_1.isUndefined)(x) ? innerX : x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RangeSlider.prototype, "y", {
        get: function () {
            var innerY = this.state.y;
            var y = this.props.y;
            return (0, utils_1.isUndefined)(y) ? innerY : y;
        },
        enumerable: false,
        configurable: true
    });
    RangeSlider.prototype.render = function () {
        var _a = this.props, axis = _a.axis, className = _a.className, xMax = _a.xMax, xMin = _a.xMin, yMax = _a.yMax, yMin = _a.yMin;
        var rest = (0, utils_1.removeProperties)(this.props, 'axis', 'className', 'onAfterEnd', 'onChange', 'onDragEnd', 'styles', 'x', 'xMin', 'xMax', 'xStep', 'y', 'yMin', 'yMax', 'yStep');
        var _b = this.position, xPos = _b.x, yPos = _b.y;
        var position = { left: "".concat(xPos, "%"), bottom: "".concat(yPos, "%") };
        var size = {};
        var orientation;
        var range;
        var slider;
        var thumb;
        var track;
        var valuemax = xMax;
        var valuemin = xMin;
        var valuenow = this.x;
        /* istanbul ignore else */
        if (axis === 'x') {
            size.width = "".concat(xPos, "%");
            slider = this.styles.sliderX;
            orientation = 'horizontal';
            range = this.styles.rangeX;
            track = this.styles.trackX;
            thumb = this.styles.thumbX;
        }
        /* istanbul ignore else */
        if (axis === 'y') {
            size.height = "".concat(yPos, "%");
            slider = this.styles.sliderY;
            range = this.styles.rangeY;
            track = this.styles.trackY;
            thumb = this.styles.thumbY;
            orientation = 'vertical';
            valuemax = yMax;
            valuemin = yMin;
            valuenow = this.y;
        }
        /* istanbul ignore else */
        if (axis === 'xy') {
            size.height = "".concat(yPos, "%");
            size.width = "".concat(xPos, "%");
            slider = this.styles.sliderXY;
            range = this.styles.rangeXY;
            track = this.styles.trackXY;
            thumb = this.styles.thumbXY;
        }
        return (React.createElement("div", __assign({ ref: this.slider, className: className, style: slider }, rest),
            React.createElement("div", { ref: this.track, className: className && "".concat(className, "__track"), onClick: this.handleClickTrack, role: "presentation", 
                // @ts-ignore We can't use React's events because the listeners
                style: track },
                React.createElement("div", { className: className && "".concat(className, "__range"), style: __assign(__assign({}, size), range) }),
                React.createElement("div", { ref: this.rail, onMouseDown: this.handleMouseDown, onTouchStart: this.handleTouchStart, 
                    // @ts-ignore We can't use React's events because the listeners
                    role: "presentation", 
                    // @ts-ignore We can't use React's events because the listeners
                    style: __assign(__assign({}, this.styles.rail), position) },
                    React.createElement("span", { "aria-label": "slider handle", "aria-orientation": orientation, "aria-valuemax": valuemax, "aria-valuemin": valuemin, "aria-valuenow": valuenow, className: className && "".concat(className, "__thumb"), onBlur: this.handleBlur, onFocus: this.handleFocus, role: "slider", style: thumb, tabIndex: 0 })))));
    };
    RangeSlider.defaultProps = (0, utils_1.getBaseProps)();
    return RangeSlider;
}(React.Component));
__exportStar(require("./types"), exports);
exports.default = RangeSlider;
//# sourceMappingURL=index.js.map